
import asyncio
import io
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from fpdf import FPDF

TOKEN = '8134057692:AAHMq4q3e2RqofrxKXp9Gqp0BRtePdzIh5c'
CHAT_ID = -1001996814306

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())


class NutritionForm(StatesGroup):
    gender = State()
    age = State()
    weight = State()
    activity1 = State()
    activity2 = State()
    goal = State()


@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    print("üöÄ /start –∑–∞–ø—É—â–µ–Ω")
    await state.clear()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ –ø–∏—Ç–∞–Ω–∏–µ.\n\n–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=gender_keyboard())
    await state.set_state(NutritionForm.gender)


@dp.message(NutritionForm.gender)
async def process_gender(message: Message, state: FSMContext):
    print("‚ñ∂Ô∏è –í–≤–æ–¥ –ø–æ–ª–∞")
    await state.update_data(gender=message.text)
    await message.answer("–£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(NutritionForm.age)


@dp.message(NutritionForm.age)
async def process_age(message: Message, state: FSMContext):
    print("‚ñ∂Ô∏è –í–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞")
    await state.update_data(age=int(message.text))
    await message.answer("–£–∫–∞–∂–∏ –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(NutritionForm.weight)


@dp.message(NutritionForm.weight)
async def process_weight(message: Message, state: FSMContext):
    print("‚ñ∂Ô∏è –í–≤–æ–¥ –≤–µ—Å–∞")
    await state.update_data(weight=float(message.text))
    await message.answer("–í—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", reply_markup=activity1_keyboard())
    await state.set_state(NutritionForm.activity1)


@dp.message(NutritionForm.activity1)
async def process_activity1(message: Message, state: FSMContext):
    print("‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1")
    await state.update_data(activity1=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", reply_markup=activity2_keyboard())
    await state.set_state(NutritionForm.activity2)


@dp.message(NutritionForm.activity2)
async def process_activity2(message: Message, state: FSMContext):
    print("‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 2")
    await state.update_data(activity2=message.text)
    await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=goal_keyboard())
    await state.set_state(NutritionForm.goal)


@dp.message(NutritionForm.goal)
async def process_goal(message: Message, state: FSMContext):
    print("üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç")
    await state.update_data(goal=message.text)
    data = await state.get_data()

    kfa = get_kfa(data["activity1"], data["activity2"])
    calories = calc_calories(data["gender"], data["age"], data["weight"], kfa, data["goal"])
    macros = calc_macros(data["weight"], calories, data["gender"])

    result_text = (
        f"<b>–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: <b>{calories} –∫–∫–∞–ª</b>\n"
        f"–ë–µ–ª–∫–∏: {macros['protein']} –≥\n"
        f"–ñ–∏—Ä—ã: {macros['fat']} –≥\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {macros['carbs']} –≥"
    )

    await message.answer(result_text)

    username = message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    await bot.send_message(
        CHAT_ID,
        f"üì• <b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç @{username}</b>\n\n"
        f"–ü–æ–ª: {data['gender']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"–í–µ—Å: {data['weight']} –∫–≥\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1: {data['activity1']}\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 2: {data['activity2']}\n"
        f"–¶–µ–ª—å: {data['goal']}\n\n"
        f"<b>–ö–ë–ñ–£:</b>\n"
        f"{calories} –∫–∫–∞–ª | –ë: {macros['protein']} –≥ | –ñ: {macros['fat']} –≥ | –£: {macros['carbs']} –≥"
    )

    # –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫ –°–ù–ê–ß–ê–õ–ê
    await message.answer(
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF")],
                [types.KeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")],
                [types.KeyboardButton(text="/start")]
            ],
            resize_keyboard=True
        )
    )

    # –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º PDF –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(pdf=f"–ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n–ë–µ–ª–∫–∏: {macros['protein']} –≥\n–ñ–∏—Ä—ã: {macros['fat']} –≥\n–£–≥–ª–µ–≤–æ–¥—ã: {macros['carbs']} –≥")
    await state.clear()


@dp.message(F.text == "üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF")
async def generate_pdf(message: Message, state: FSMContext):
    print("üìÑ PDF-–∑–∞–ø—Ä–æ—Å")
    data = await state.get_data()
    text = data.get("pdf", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF.")
    pdf_bytes = create_pdf(text)
    await message.answer_document(BufferedInputFile(pdf_bytes, filename="ration.pdf"))


@dp.message(F.text == "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")
async def handle_channel(message: Message):
    await message.answer("–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üëâ https://t.me/doc_kalinichenko")


def create_pdf(text: str) -> bytes:
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=14)
    for line in text.split("\n"):
        pdf.cell(200, 10, txt=line, ln=True)
    buf = io.BytesIO()
    pdf.output(buf)
    return buf.getvalue()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def gender_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞")], [types.KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞")]],
        resize_keyboard=True
    )


def activity1_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–í –æ—Ñ–∏—Å–µ")],
            [types.KeyboardButton(text="–í –æ—Ñ–∏—Å–µ, –Ω–æ —á–∞—Å—Ç–æ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—é—Å—å")],
            [types.KeyboardButton(text="–í–µ—Å—å –¥–µ–Ω—å —Å–∏–∂—É –¥–æ–º–∞")],
            [types.KeyboardButton(text="–í–µ—Å—å –¥–µ–Ω—å –Ω–∞ –Ω–æ–≥–∞—Ö")],
            [types.KeyboardButton(text="–§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥")]
        ],
        resize_keyboard=True
    )


def activity2_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ú–∏–Ω–∏–º—É–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ")],
            [types.KeyboardButton(text="–ù–µ–±–æ–ª—å—à–∏–µ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é")],
            [types.KeyboardButton(text="3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é")],
            [types.KeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏")],
            [types.KeyboardButton(text="–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")]
        ],
        resize_keyboard=True
    )


def goal_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ")],
            [types.KeyboardButton(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ")],
            [types.KeyboardButton(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")]
        ],
        resize_keyboard=True
    )


# --- –§–æ—Ä–º—É–ª—ã ---
def get_kfa(activity1, activity2):
    scores = {
        "–í –æ—Ñ–∏—Å–µ": 1,
        "–í –æ—Ñ–∏—Å–µ, –Ω–æ —á–∞—Å—Ç–æ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—é—Å—å": 1.3,
        "–í–µ—Å—å –¥–µ–Ω—å —Å–∏–∂—É –¥–æ–º–∞": 1,
        "–í–µ—Å—å –¥–µ–Ω—å –Ω–∞ –Ω–æ–≥–∞—Ö": 1.5,
        "–§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥": 1.5,
        "–ú–∏–Ω–∏–º—É–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ": 1,
        "–ù–µ–±–æ–ª—å—à–∏–µ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é": 1.3,
        "3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é": 1.5,
        "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏": 1.3,
        "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å": 1.5
    }
    avg = (scores.get(activity1, 1) + scores.get(activity2, 1)) / 2
    if avg <= 1.1:
        return 1
    elif avg <= 1.4:
        return 1.3
    return 1.5


def calc_calories(gender, age, weight, kfa, goal):
    base = 0
    if gender.lower().startswith("–∂"):
        if age <= 30:
            base = (0.062 * weight + 2.036) * 240
        elif age <= 60:
            base = (0.034 * weight + 3.538) * 240
        else:
            base = (0.038 * weight + 2.755) * 240
    else:
        if age <= 30:
            base = (0.063 * weight + 2.896) * 240
        elif age <= 60:
            base = (0.048 * weight + 3.653) * 240
        else:
            base = (0.049 * weight + 2.459) * 240

    result = base * kfa
    if goal.lower().startswith("–ø–æ—Ö"):
        result -= 200
    elif goal.lower().startswith("–Ω–∞–±"):
        result += 350
    return round(result)


def calc_macros(weight, calories, gender):
    if gender.lower().startswith("–∂"):
        protein = round(weight * 1.5)
        fat = round(weight * 1)
    else:
        protein = round(weight * 2)
        fat = round(weight * 1.1)

    protein_kcal = protein * 4
    fat_kcal = fat * 9
    carbs_kcal = calories - protein_kcal - fat_kcal
    carbs = round(carbs_kcal / 4)
    return {"protein": protein, "fat": fat, "carbs": carbs}


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
